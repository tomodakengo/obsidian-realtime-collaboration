{"code":"export class ShareDialog {\n    baseUrl;\n    roomIdLength;\n    rooms = new Map();\n    roomPasswords = new Map();\n    constructor(options = {}) {\n        this.baseUrl = options.baseUrl || 'https://obsidian.md';\n        this.roomIdLength = options.roomIdLength || 16;\n    }\n    generateRoomId() {\n        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        let result = '';\n        for (let i = 0; i < this.roomIdLength; i++) {\n            result += chars.charAt(Math.floor(Math.random() * chars.length));\n        }\n        return result;\n    }\n    generateShareableLink(roomId) {\n        return `${this.baseUrl}/collaborate/${roomId}`;\n    }\n    parseRoomIdFromLink(link) {\n        try {\n            const url = new URL(link);\n            const pathParts = url.pathname.split('/');\n            const roomIdIndex = pathParts.indexOf('collaborate');\n            if (roomIdIndex !== -1 && roomIdIndex + 1 < pathParts.length) {\n                const roomId = pathParts[roomIdIndex + 1];\n                // Validate room ID format\n                if (roomId && roomId.length === this.roomIdLength && /^[A-Za-z0-9]+$/.test(roomId)) {\n                    return roomId;\n                }\n            }\n        }\n        catch (error) {\n            console.error('Failed to parse room ID from link:', error);\n        }\n        return null;\n    }\n    setRoomPassword(roomId, password) {\n        this.roomPasswords.set(roomId, password);\n        // Update room settings\n        const room = this.rooms.get(roomId);\n        if (room) {\n            room.hasPassword = true;\n            room.updatedAt = new Date();\n        }\n    }\n    hasRoomPassword(roomId) {\n        return this.roomPasswords.has(roomId);\n    }\n    validateRoomPassword(roomId, password) {\n        const storedPassword = this.roomPasswords.get(roomId);\n        return storedPassword === password;\n    }\n    getRoomSettings(roomId) {\n        let room = this.rooms.get(roomId);\n        if (!room) {\n            room = {\n                id: roomId,\n                hasPassword: false,\n                createdAt: new Date(),\n                updatedAt: new Date()\n            };\n            this.rooms.set(roomId, room);\n        }\n        return { ...room };\n    }\n    updateRoomSettings(roomId, settings) {\n        const room = this.rooms.get(roomId);\n        if (room) {\n            Object.assign(room, settings, { updatedAt: new Date() });\n        }\n        else {\n            const newRoom = {\n                id: roomId,\n                hasPassword: false,\n                createdAt: new Date(),\n                updatedAt: new Date(),\n                ...settings\n            };\n            this.rooms.set(roomId, newRoom);\n        }\n    }\n    createRoom(name, description, maxParticipants) {\n        const roomId = this.generateRoomId();\n        const room = {\n            id: roomId,\n            name,\n            description,\n            maxParticipants,\n            hasPassword: false,\n            createdAt: new Date(),\n            updatedAt: new Date()\n        };\n        this.rooms.set(roomId, room);\n        return roomId;\n    }\n    deleteRoom(roomId) {\n        const deleted = this.rooms.delete(roomId);\n        if (deleted) {\n            this.roomPasswords.delete(roomId);\n        }\n        return deleted;\n    }\n    getAllRooms() {\n        return Array.from(this.rooms.values());\n    }\n    getRoomCount() {\n        return this.rooms.size;\n    }\n    clearRooms() {\n        this.rooms.clear();\n        this.roomPasswords.clear();\n    }\n    exportRoomData(roomId) {\n        const room = this.rooms.get(roomId);\n        if (!room)\n            return null;\n        const exportData = {\n            room,\n            hasPassword: this.hasRoomPassword(roomId),\n            exportedAt: new Date().toISOString()\n        };\n        return JSON.stringify(exportData, null, 2);\n    }\n    importRoomData(data) {\n        try {\n            const importData = JSON.parse(data);\n            const room = importData.room;\n            if (room && room.id) {\n                this.rooms.set(room.id, room);\n                return true;\n            }\n        }\n        catch (error) {\n            console.error('Failed to import room data:', error);\n        }\n        return false;\n    }\n    getRoomStats() {\n        const total = this.rooms.size;\n        const withPassword = Array.from(this.rooms.values()).filter(room => room.hasPassword).length;\n        const withoutPassword = total - withPassword;\n        return { total, withPassword, withoutPassword };\n    }\n    destroy() {\n        this.rooms.clear();\n        this.roomPasswords.clear();\n    }\n}\n","references":["/workspace/obsidian-realtime-collaboration/src/types/index.ts"]}
