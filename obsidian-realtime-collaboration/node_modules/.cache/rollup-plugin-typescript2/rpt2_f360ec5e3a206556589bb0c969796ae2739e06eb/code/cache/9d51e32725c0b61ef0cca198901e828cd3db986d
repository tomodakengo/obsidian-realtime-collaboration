{"code":"import { Plugin } from 'obsidian';\nimport { YjsManager } from './src/collaborative/YjsManager';\nimport { UserAwareness } from './src/ui/UserAwareness';\nimport { ShareDialog } from './src/ui/ShareDialog';\nimport { EncryptionManager } from './src/security/EncryptionManager';\nimport { AccessControl } from './src/security/AccessControl';\nexport default class CollaborativePlugin extends Plugin {\n    yjsManager;\n    p2pProvider;\n    editorBinding;\n    userAwareness;\n    shareDialog;\n    encryptionManager;\n    accessControl;\n    isInitialized = false;\n    async onload() {\n        console.log('Loading Collaborative Plugin');\n        try {\n            // Initialize core components\n            this.encryptionManager = new EncryptionManager();\n            this.accessControl = new AccessControl();\n            this.userAwareness = new UserAwareness();\n            this.shareDialog = new ShareDialog();\n            // Initialize Y.js manager with improved configuration\n            this.yjsManager = new YjsManager('collaborative-doc', {\n                enableIndexeddb: true,\n                enableWebrtc: true,\n                roomName: 'obsidian-collab-room',\n                signalingServers: [\n                    'wss://signaling.yjs.dev',\n                    'wss://y-webrtc-signaling-eu.herokuapp.com',\n                    'wss://y-webrtc-signaling-us.herokuapp.com'\n                ]\n            });\n            // Set up document change monitoring\n            this.setupDocumentMonitoring();\n            // Set up connection monitoring\n            this.setupConnectionMonitoring();\n            // Set up user awareness\n            this.setupUserAwareness();\n            // Register editor extension\n            this.setupEditorExtension();\n            // Initialize P2P connection\n            this.initializeP2PConnection();\n            this.isInitialized = true;\n            console.log('Collaborative Plugin loaded successfully');\n        }\n        catch (error) {\n            console.error('Failed to load Collaborative Plugin:', error);\n        }\n    }\n    setupDocumentMonitoring() {\n        if (!this.yjsManager)\n            return;\n        // Monitor document changes\n        this.yjsManager.onDocumentChange((event) => {\n            console.log('Document changed:', event);\n            // Update user awareness with change information\n            if (this.userAwareness && event.userId) {\n                this.userAwareness.updateUserActivity(event.userId, {\n                    type: event.type,\n                    position: event.position,\n                    timestamp: event.timestamp\n                });\n            }\n        });\n    }\n    setupConnectionMonitoring() {\n        if (!this.yjsManager)\n            return;\n        // Monitor connection state changes\n        this.yjsManager.onConnectionChange((connected) => {\n            console.log('Connection state changed:', connected ? 'CONNECTED' : 'DISCONNECTED');\n            // Update user status based on connection\n            if (this.userAwareness) {\n                const localUserState = this.yjsManager?.getLocalUserState();\n                if (localUserState?.user) {\n                    this.userAwareness.setUserStatus(localUserState.user.id, connected ? 'online' : 'offline');\n                }\n            }\n            // Update connection state in UI\n            this.updateConnectionStatus(connected);\n        });\n    }\n    setupUserAwareness() {\n        if (!this.userAwareness || !this.yjsManager)\n            return;\n        // Add current user\n        const localUserState = this.yjsManager.getLocalUserState();\n        if (localUserState?.user) {\n            this.userAwareness.addUser({\n                id: localUserState.user.id,\n                name: localUserState.user.name,\n                color: localUserState.user.color,\n                status: 'online'\n            });\n        }\n        // Listen for user changes from Y.js awareness\n        const awareness = this.yjsManager.getAwareness();\n        awareness.on('change', (changes) => {\n            // Update user awareness when remote users change\n            this.updateUserAwarenessFromYjs(awareness);\n        });\n        // Listen for user awareness changes\n        this.userAwareness.onUsersChange((users) => {\n            console.log('Users changed:', users);\n        });\n    }\n    updateUserAwarenessFromYjs(awareness) {\n        if (!this.userAwareness)\n            return;\n        const states = awareness.getStates();\n        states.forEach((state, clientId) => {\n            if (state.user && this.userAwareness) {\n                const user = {\n                    id: state.user.id,\n                    name: state.user.name,\n                    color: state.user.color,\n                    status: state.user.status || 'online'\n                };\n                // Add or update user in awareness\n                this.userAwareness.addUser(user);\n            }\n        });\n    }\n    updateConnectionStatus(connected) {\n        // Update connection status in console for now\n        console.log(`Collaborative connection: ${connected ? 'ðŸŸ¢ Connected' : 'ðŸ”´ Disconnected'}`);\n    }\n    initializeP2PConnection() {\n        if (!this.yjsManager)\n            return;\n        // Connect to P2P network\n        this.yjsManager.connect();\n        // Set up periodic connection check\n        setInterval(() => {\n            if (this.yjsManager && !this.yjsManager.isConnected()) {\n                console.log('Attempting to reconnect...');\n                this.yjsManager.connect();\n            }\n        }, 30000); // Check every 30 seconds\n    }\n    // Note: This method name conflicts with Obsidian's Plugin class\n    // We'll rename it to avoid the conflict\n    setupEditorExtension() {\n        if (!this.yjsManager)\n            return;\n        // Get the main text element from Y.js\n        const ytext = this.yjsManager.getText('content');\n        // For now, just log that we're ready\n        // CodeMirror integration will be implemented in a later phase\n        console.log('Collaborative editor extension ready for integration');\n        console.log('Y.js text element:', ytext.toString());\n        console.log('Document content length:', ytext.length);\n    }\n    onunload() {\n        console.log('Unloading Collaborative Plugin');\n        // Clean up all components\n        if (this.editorBinding) {\n            this.editorBinding.destroy();\n        }\n        if (this.yjsManager) {\n            this.yjsManager.destroy();\n        }\n        if (this.userAwareness) {\n            this.userAwareness.destroy();\n        }\n        if (this.shareDialog) {\n            this.shareDialog.destroy();\n        }\n        if (this.accessControl) {\n            this.accessControl.destroy();\n        }\n        this.isInitialized = false;\n        console.log('Collaborative Plugin unloaded');\n    }\n    // Public API methods for other parts of the plugin\n    getYjsManager() {\n        return this.yjsManager;\n    }\n    getP2PProvider() {\n        return this.p2pProvider;\n    }\n    getUserAwareness() {\n        return this.userAwareness;\n    }\n    getShareDialog() {\n        return this.shareDialog;\n    }\n    getEncryptionManager() {\n        return this.encryptionManager;\n    }\n    getAccessControl() {\n        return this.accessControl;\n    }\n    isPluginInitialized() {\n        return this.isInitialized;\n    }\n    // Utility methods\n    getConnectionStatus() {\n        return this.yjsManager ? this.yjsManager.isConnected() : false;\n    }\n    getConnectedUsersCount() {\n        if (!this.yjsManager)\n            return 0;\n        const users = this.yjsManager.getConnectedUsers();\n        return users.size;\n    }\n    getDocumentContent() {\n        if (!this.yjsManager)\n            return '';\n        const ytext = this.yjsManager.getText('content');\n        return ytext.toString();\n    }\n    setDocumentContent(content) {\n        if (!this.yjsManager)\n            return;\n        const ytext = this.yjsManager.getText('content');\n        ytext.delete(0, ytext.length);\n        ytext.insert(0, content);\n    }\n}\n","references":["/workspace/obsidian-realtime-collaboration/node_modules/obsidian/obsidian.d.ts","/workspace/obsidian-realtime-collaboration/src/collaborative/YjsManager.ts","/workspace/obsidian-realtime-collaboration/src/collaborative/P2PProvider.ts","/workspace/obsidian-realtime-collaboration/src/collaborative/ObsidianEditorBinding.ts","/workspace/obsidian-realtime-collaboration/src/ui/UserAwareness.ts","/workspace/obsidian-realtime-collaboration/src/ui/ShareDialog.ts","/workspace/obsidian-realtime-collaboration/src/security/EncryptionManager.ts","/workspace/obsidian-realtime-collaboration/src/security/AccessControl.ts","/workspace/obsidian-realtime-collaboration/src/types/index.ts"]}
