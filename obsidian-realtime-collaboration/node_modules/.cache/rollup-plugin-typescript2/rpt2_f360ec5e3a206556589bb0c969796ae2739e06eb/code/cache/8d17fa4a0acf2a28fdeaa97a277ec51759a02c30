{"code":"export class AccessControl {\n    sharedFolders = new Map();\n    maxFolders;\n    maxParticipantsPerFolder;\n    constructor(options = {}) {\n        this.maxFolders = options.maxFolders || 100;\n        this.maxParticipantsPerFolder = options.maxParticipantsPerFolder || 50;\n    }\n    createSharedFolder(folder) {\n        if (this.sharedFolders.size >= this.maxFolders) {\n            console.warn(`Maximum number of shared folders (${this.maxFolders}) reached`);\n            return false;\n        }\n        // Ensure required fields are present\n        if (!folder.id || !folder.name || !folder.passwordHash) {\n            console.error('Shared folder must have id, name, and passwordHash');\n            return false;\n        }\n        // Set timestamps if not provided\n        if (!folder.createdAt) {\n            folder.createdAt = new Date();\n        }\n        if (!folder.updatedAt) {\n            folder.updatedAt = new Date();\n        }\n        this.sharedFolders.set(folder.id, folder);\n        return true;\n    }\n    getSharedFolder(folderId) {\n        return this.sharedFolders.get(folderId);\n    }\n    getAllSharedFolders() {\n        return Array.from(this.sharedFolders.values());\n    }\n    updateSharedFolder(folderId, updates) {\n        const folder = this.sharedFolders.get(folderId);\n        if (!folder) {\n            return false;\n        }\n        // Update fields\n        Object.assign(folder, updates, { updatedAt: new Date() });\n        return true;\n    }\n    deleteSharedFolder(folderId) {\n        return this.sharedFolders.delete(folderId);\n    }\n    addParticipant(folderId, userId, permissions) {\n        const folder = this.sharedFolders.get(folderId);\n        if (!folder) {\n            return false;\n        }\n        if (folder.participants.size >= this.maxParticipantsPerFolder) {\n            console.warn(`Maximum number of participants (${this.maxParticipantsPerFolder}) reached for folder ${folderId}`);\n            return false;\n        }\n        folder.participants.add(userId);\n        folder.permissions.set(userId, permissions);\n        folder.updatedAt = new Date();\n        return true;\n    }\n    removeParticipant(folderId, userId) {\n        const folder = this.sharedFolders.get(folderId);\n        if (!folder) {\n            return false;\n        }\n        folder.participants.delete(userId);\n        folder.permissions.delete(userId);\n        folder.updatedAt = new Date();\n        return true;\n    }\n    hasPermission(folderId, userId, permission) {\n        const folder = this.sharedFolders.get(folderId);\n        if (!folder) {\n            return false;\n        }\n        const userPermissions = folder.permissions.get(userId);\n        if (!userPermissions) {\n            return false;\n        }\n        return userPermissions.includes(permission);\n    }\n    grantPermission(folderId, userId, permission) {\n        const folder = this.sharedFolders.get(folderId);\n        if (!folder) {\n            return false;\n        }\n        if (!folder.participants.has(userId)) {\n            return false;\n        }\n        const userPermissions = folder.permissions.get(userId) || [];\n        if (!userPermissions.includes(permission)) {\n            userPermissions.push(permission);\n            folder.permissions.set(userId, userPermissions);\n            folder.updatedAt = new Date();\n        }\n        return true;\n    }\n    revokePermission(folderId, userId, permission) {\n        const folder = this.sharedFolders.get(folderId);\n        if (!folder) {\n            return false;\n        }\n        const userPermissions = folder.permissions.get(userId);\n        if (!userPermissions) {\n            return false;\n        }\n        const index = userPermissions.indexOf(permission);\n        if (index > -1) {\n            userPermissions.splice(index, 1);\n            folder.permissions.set(userId, userPermissions);\n            folder.updatedAt = new Date();\n        }\n        return true;\n    }\n    getUserPermissions(folderId, userId) {\n        const folder = this.sharedFolders.get(folderId);\n        if (!folder) {\n            return [];\n        }\n        return folder.permissions.get(userId) || [];\n    }\n    getFolderParticipants(folderId) {\n        const folder = this.sharedFolders.get(folderId);\n        if (!folder) {\n            return [];\n        }\n        return Array.from(folder.participants);\n    }\n    getParticipantCount(folderId) {\n        const folder = this.sharedFolders.get(folderId);\n        if (!folder) {\n            return 0;\n        }\n        return folder.participants.size;\n    }\n    validateFolderAccess(folderId, password) {\n        const folder = this.sharedFolders.get(folderId);\n        if (!folder) {\n            return false;\n        }\n        // In a real implementation, this would use proper password hashing\n        // For now, we'll do a simple comparison\n        return folder.passwordHash === password;\n    }\n    changeFolderPassword(folderId, newPasswordHash) {\n        const folder = this.sharedFolders.get(folderId);\n        if (!folder) {\n            return false;\n        }\n        folder.passwordHash = newPasswordHash;\n        folder.updatedAt = new Date();\n        return true;\n    }\n    getFolderStats() {\n        const total = this.sharedFolders.size;\n        let totalParticipants = 0;\n        this.sharedFolders.forEach(folder => {\n            totalParticipants += folder.participants.size;\n        });\n        const averageParticipants = total > 0 ? totalParticipants / total : 0;\n        return { total, totalParticipants, averageParticipants };\n    }\n    searchFolders(query) {\n        const results = [];\n        const lowerQuery = query.toLowerCase();\n        this.sharedFolders.forEach(folder => {\n            if (folder.name.toLowerCase().includes(lowerQuery) ||\n                (folder.description && folder.description.toLowerCase().includes(lowerQuery))) {\n                results.push(folder);\n            }\n        });\n        return results;\n    }\n    getFoldersByUser(userId) {\n        const results = [];\n        this.sharedFolders.forEach(folder => {\n            if (folder.participants.has(userId)) {\n                results.push(folder);\n            }\n        });\n        return results;\n    }\n    clearAllFolders() {\n        this.sharedFolders.clear();\n    }\n    destroy() {\n        this.clearAllFolders();\n    }\n}\n","references":["/workspace/obsidian-realtime-collaboration/src/types/index.ts"]}
